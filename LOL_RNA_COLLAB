from keras.models import Sequential
from keras.layers import Dense, Dropout
from sklearn.metrics import confusion_matrix, auc, roc_curve
import numpy
import sys
from sklearn.model_selection import train_test_split
import matplotlib.pyplot as plt
 
dataset = numpy.loadtxt("/content/drive/My Drive/Colab Notebooks/high_diamond_ranked_10min.csv", delimiter=",")
 
X = dataset[:,0:10]
Y = dataset[:,10]
 
X_train, X_test, Y_train, Y_test = train_test_split(X,Y, test_size=0.333, random_state=42, shuffle=True)

model = Sequential()
model.add(Dense(100, input_dim=X.shape[1], activation="relu"))
model.add(Dense(33, activation="relu"))
model.add(Dropout(0.15))
model.add(Dense(11, activation="relu"))
model.add(Dense(1, activation="sigmoid"))
 
model.compile(loss="binary_crossentropy", optimizer="adam", metrics=["accuracy"])
 
history = model.fit(X_train, Y_train, validation_data=(X_test, Y_test), epochs=200, batch_size=100)
print(history.history.keys())
plt.plot(history.history['accuracy'])
plt.plot(history.history['val_accuracy'])
plt.title('model accuracy')
plt.ylabel('accuracy')
plt.xlabel('epoch')
plt.legend(['train', 'test'], loc='upper left')
plt.show()

plt.plot(history.history['loss'])
plt.plot(history.history['val_loss'])
plt.title('model loss')
plt.ylabel('loss')
plt.xlabel('epoch')
plt.legend(['train', 'test'], loc='upper left')
plt.show()

pred = model.predict_classes(X_test)
# print(pred)

tn, fp, fn, tp = confusion_matrix(Y_test, pred).ravel()

tpr = tp / (tp+fn)
tnr = tn / (tn+fp)

print('TPR: ', tpr)
print('TNR: ', tnr)

fpr, tpr_roc, threshold = roc_curve(Y_test, pred, pos_label=1)

auc = auc(fpr, tpr_roc)

plt.plot([0,1], [0,1], linestyle='--', lw=2, color='r', label='Chance', alpha=.8)
plt.plot(fpr,tpr_roc, color='b', label=r'ROC (AUC = %0.2f)' % (auc), lw=2, alpha=.8)
plt.suptitle("ROC Curve")
plt.xlabel('FPR')
plt.ylabel('TNR')
plt.legend(loc="lower right")
plt.show()
 
# _, accuracy = model.evaluate(X_test,Y_test)
# print("accuracy: %.2f" %(accuracy * 100))


